// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package reservation is a generated GoMock package.
package reservation

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreateReservation mocks base method.
func (m *Mockstorage) CreateReservation(ctx context.Context, r *reservation) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReservation", ctx, r)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReservation indicates an expected call of CreateReservation.
func (mr *MockstorageMockRecorder) CreateReservation(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReservation", reflect.TypeOf((*Mockstorage)(nil).CreateReservation), ctx, r)
}

// GetReservation mocks base method.
func (m *Mockstorage) GetReservation(ctx context.Context, uid string) (reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservation", ctx, uid)
	ret0, _ := ret[0].(reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservation indicates an expected call of GetReservation.
func (mr *MockstorageMockRecorder) GetReservation(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservation", reflect.TypeOf((*Mockstorage)(nil).GetReservation), ctx, uid)
}

// GetReservations mocks base method.
func (m *Mockstorage) GetReservations(ctx context.Context, username, status string) ([]reservation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReservations", ctx, username, status)
	ret0, _ := ret[0].([]reservation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReservations indicates an expected call of GetReservations.
func (mr *MockstorageMockRecorder) GetReservations(ctx, username, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReservations", reflect.TypeOf((*Mockstorage)(nil).GetReservations), ctx, username, status)
}

// UpdateReservationStatus mocks base method.
func (m *Mockstorage) UpdateReservationStatus(ctx context.Context, uid, username, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReservationStatus", ctx, uid, username, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateReservationStatus indicates an expected call of UpdateReservationStatus.
func (mr *MockstorageMockRecorder) UpdateReservationStatus(ctx, uid, username, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReservationStatus", reflect.TypeOf((*Mockstorage)(nil).UpdateReservationStatus), ctx, uid, username, status)
}
