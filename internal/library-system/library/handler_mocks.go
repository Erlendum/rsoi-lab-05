// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package library is a generated GoMock package.
package library

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// GetBooksAvailableCount mocks base method.
func (m *Mockstorage) GetBooksAvailableCount(ctx context.Context, libraryUid, bookUid string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksAvailableCount", ctx, libraryUid, bookUid)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksAvailableCount indicates an expected call of GetBooksAvailableCount.
func (mr *MockstorageMockRecorder) GetBooksAvailableCount(ctx, libraryUid, bookUid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksAvailableCount", reflect.TypeOf((*Mockstorage)(nil).GetBooksAvailableCount), ctx, libraryUid, bookUid)
}

// GetBooksByLibrary mocks base method.
func (m *Mockstorage) GetBooksByLibrary(ctx context.Context, libraryUid string, offset, limit int, showAll bool) ([]book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByLibrary", ctx, libraryUid, offset, limit, showAll)
	ret0, _ := ret[0].([]book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByLibrary indicates an expected call of GetBooksByLibrary.
func (mr *MockstorageMockRecorder) GetBooksByLibrary(ctx, libraryUid, offset, limit, showAll interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByLibrary", reflect.TypeOf((*Mockstorage)(nil).GetBooksByLibrary), ctx, libraryUid, offset, limit, showAll)
}

// GetBooksByUids mocks base method.
func (m *Mockstorage) GetBooksByUids(ctx context.Context, uids []string) ([]book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByUids", ctx, uids)
	ret0, _ := ret[0].([]book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByUids indicates an expected call of GetBooksByUids.
func (mr *MockstorageMockRecorder) GetBooksByUids(ctx, uids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByUids", reflect.TypeOf((*Mockstorage)(nil).GetBooksByUids), ctx, uids)
}

// GetLibraries mocks base method.
func (m *Mockstorage) GetLibraries(ctx context.Context, city string, offset, limit int) ([]library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibraries", ctx, city, offset, limit)
	ret0, _ := ret[0].([]library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibraries indicates an expected call of GetLibraries.
func (mr *MockstorageMockRecorder) GetLibraries(ctx, city, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibraries", reflect.TypeOf((*Mockstorage)(nil).GetLibraries), ctx, city, offset, limit)
}

// GetLibrariesByUids mocks base method.
func (m *Mockstorage) GetLibrariesByUids(ctx context.Context, uids []string) ([]library, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLibrariesByUids", ctx, uids)
	ret0, _ := ret[0].([]library)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLibrariesByUids indicates an expected call of GetLibrariesByUids.
func (mr *MockstorageMockRecorder) GetLibrariesByUids(ctx, uids interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLibrariesByUids", reflect.TypeOf((*Mockstorage)(nil).GetLibrariesByUids), ctx, uids)
}

// UpdateBooksAvailableCount mocks base method.
func (m *Mockstorage) UpdateBooksAvailableCount(ctx context.Context, libraryUid, bookUid string, count int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBooksAvailableCount", ctx, libraryUid, bookUid, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBooksAvailableCount indicates an expected call of UpdateBooksAvailableCount.
func (mr *MockstorageMockRecorder) UpdateBooksAvailableCount(ctx, libraryUid, bookUid, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBooksAvailableCount", reflect.TypeOf((*Mockstorage)(nil).UpdateBooksAvailableCount), ctx, libraryUid, bookUid, count)
}
